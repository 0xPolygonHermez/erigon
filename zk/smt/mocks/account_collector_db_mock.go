// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/zk/smt (interfaces: AccountCollectorDb)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mocks/account_collector_db_mock.go -package=mocks . AccountCollectorDb
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	utils "github.com/ledgerwatch/erigon/smt/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountCollectorDb is a mock of AccountCollectorDb interface.
type MockAccountCollectorDb struct {
	ctrl     *gomock.Controller
	recorder *MockAccountCollectorDbMockRecorder
}

// MockAccountCollectorDbMockRecorder is the mock recorder for MockAccountCollectorDb.
type MockAccountCollectorDbMockRecorder struct {
	mock *MockAccountCollectorDb
}

// NewMockAccountCollectorDb creates a new mock instance.
func NewMockAccountCollectorDb(ctrl *gomock.Controller) *MockAccountCollectorDb {
	mock := &MockAccountCollectorDb{ctrl: ctrl}
	mock.recorder = &MockAccountCollectorDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountCollectorDb) EXPECT() *MockAccountCollectorDbMockRecorder {
	return m.recorder
}

// InsertAccountValue mocks base method.
func (m *MockAccountCollectorDb) InsertAccountValue(arg0 utils.NodeKey, arg1 utils.NodeValue8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccountValue indicates an expected call of InsertAccountValue.
func (mr *MockAccountCollectorDbMockRecorder) InsertAccountValue(arg0, arg1 any) *MockAccountCollectorDbInsertAccountValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountValue", reflect.TypeOf((*MockAccountCollectorDb)(nil).InsertAccountValue), arg0, arg1)
	return &MockAccountCollectorDbInsertAccountValueCall{Call: call}
}

// MockAccountCollectorDbInsertAccountValueCall wrap *gomock.Call
type MockAccountCollectorDbInsertAccountValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccountCollectorDbInsertAccountValueCall) Return(arg0 error) *MockAccountCollectorDbInsertAccountValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccountCollectorDbInsertAccountValueCall) Do(f func(utils.NodeKey, utils.NodeValue8) error) *MockAccountCollectorDbInsertAccountValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccountCollectorDbInsertAccountValueCall) DoAndReturn(f func(utils.NodeKey, utils.NodeValue8) error) *MockAccountCollectorDbInsertAccountValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertKeySource mocks base method.
func (m *MockAccountCollectorDb) InsertKeySource(arg0 utils.NodeKey, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKeySource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKeySource indicates an expected call of InsertKeySource.
func (mr *MockAccountCollectorDbMockRecorder) InsertKeySource(arg0, arg1 any) *MockAccountCollectorDbInsertKeySourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKeySource", reflect.TypeOf((*MockAccountCollectorDb)(nil).InsertKeySource), arg0, arg1)
	return &MockAccountCollectorDbInsertKeySourceCall{Call: call}
}

// MockAccountCollectorDbInsertKeySourceCall wrap *gomock.Call
type MockAccountCollectorDbInsertKeySourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccountCollectorDbInsertKeySourceCall) Return(arg0 error) *MockAccountCollectorDbInsertKeySourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccountCollectorDbInsertKeySourceCall) Do(f func(utils.NodeKey, []byte) error) *MockAccountCollectorDbInsertKeySourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccountCollectorDbInsertKeySourceCall) DoAndReturn(f func(utils.NodeKey, []byte) error) *MockAccountCollectorDbInsertKeySourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
