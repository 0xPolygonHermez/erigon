// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go

// Package txpool is a generated GoMock package.
package txpool

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	remote "github.com/ledgerwatch/erigon-lib/gointerfaces/remote"
	kv "github.com/ledgerwatch/erigon-lib/kv"
	types "github.com/ledgerwatch/erigon-lib/types"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// AddLocalTxs mocks base method.
func (m *MockPool) AddLocalTxs(ctx context.Context, newTxs types.TxSlots, tx kv.Tx) ([]DiscardReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalTxs", ctx, newTxs, tx)
	ret0, _ := ret[0].([]DiscardReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalTxs indicates an expected call of AddLocalTxs.
func (mr *MockPoolMockRecorder) AddLocalTxs(ctx, newTxs, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalTxs", reflect.TypeOf((*MockPool)(nil).AddLocalTxs), ctx, newTxs, tx)
}

// AddNewGoodPeer mocks base method.
func (m *MockPool) AddNewGoodPeer(peerID types.PeerID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewGoodPeer", peerID)
}

// AddNewGoodPeer indicates an expected call of AddNewGoodPeer.
func (mr *MockPoolMockRecorder) AddNewGoodPeer(peerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewGoodPeer", reflect.TypeOf((*MockPool)(nil).AddNewGoodPeer), peerID)
}

// AddRemoteTxs mocks base method.
func (m *MockPool) AddRemoteTxs(ctx context.Context, newTxs types.TxSlots) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRemoteTxs", ctx, newTxs)
}

// AddRemoteTxs indicates an expected call of AddRemoteTxs.
func (mr *MockPoolMockRecorder) AddRemoteTxs(ctx, newTxs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteTxs", reflect.TypeOf((*MockPool)(nil).AddRemoteTxs), ctx, newTxs)
}

// GetRlp mocks base method.
func (m *MockPool) GetRlp(tx kv.Tx, hash []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRlp", tx, hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRlp indicates an expected call of GetRlp.
func (mr *MockPoolMockRecorder) GetRlp(tx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRlp", reflect.TypeOf((*MockPool)(nil).GetRlp), tx, hash)
}

// IdHashKnown mocks base method.
func (m *MockPool) IdHashKnown(tx kv.Tx, hash []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdHashKnown", tx, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdHashKnown indicates an expected call of IdHashKnown.
func (mr *MockPoolMockRecorder) IdHashKnown(tx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdHashKnown", reflect.TypeOf((*MockPool)(nil).IdHashKnown), tx, hash)
}

// OnNewBlock mocks base method.
func (m *MockPool) OnNewBlock(ctx context.Context, stateChanges *remote.StateChangeBatch, unwindTxs, minedTxs types.TxSlots, tx kv.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewBlock", ctx, stateChanges, unwindTxs, minedTxs, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewBlock indicates an expected call of OnNewBlock.
func (mr *MockPoolMockRecorder) OnNewBlock(ctx, stateChanges, unwindTxs, minedTxs, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockPool)(nil).OnNewBlock), ctx, stateChanges, unwindTxs, minedTxs, tx)
}

// Started mocks base method.
func (m *MockPool) Started() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Started indicates an expected call of Started.
func (mr *MockPoolMockRecorder) Started() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockPool)(nil).Started))
}

// ValidateSerializedTxn mocks base method.
func (m *MockPool) ValidateSerializedTxn(serializedTxn []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSerializedTxn", serializedTxn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSerializedTxn indicates an expected call of ValidateSerializedTxn.
func (mr *MockPoolMockRecorder) ValidateSerializedTxn(serializedTxn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSerializedTxn", reflect.TypeOf((*MockPool)(nil).ValidateSerializedTxn), serializedTxn)
}
